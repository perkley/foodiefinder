AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Django App on EC2 with Elastic IP and Custom Project Name

Parameters:
  ProjectName:
    Description: The name of the project to use for the instance and configuration.
    Type: String
    Default: foodiefinder

Resources:
  FoodieFinderInstance:
    Type: AWS::EC2::Instance
    Properties: 
      InstanceType: t2.micro
      ImageId: ami-04b70fa74e45c3917 # Ubuntu Server 24.04
      KeyName: vockey
      IamInstanceProfile: !Ref MyInstanceProfile # Assign the Lab Role
      SecurityGroups: 
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref ProjectName
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            
            PROGRESS_FILE="/var/log/progress.log"
            
            # STEP 1
            echo "1: Starting updates" > $PROGRESS_FILE
            sudo apt-get update
            sudo apt-get upgrade -y

            # STEP 2
            echo "2: Create Local Secrets.json File" > $PROGRESS_FILE
            # Allow https through firewall
            # sudo ufw allow https
            # sudo ufw allow OpenSSH
            # sudo ufw enable

            # STEP 3
            echo "3: Install python3-venv nginx supervisor and clone project" > $PROGRESS_FILE
            # Install needed software to run django in an environment
            sudo apt-get install -y python3-venv nginx supervisor
            python3 -m venv /home/ubuntu/env
            source /home/ubuntu/env/bin/activate
            environment=DJANGO_ENV="production"
            pip3 install pipenv gunicorn
            git clone https://github.com/perkley/${ProjectName}.git /home/ubuntu/${ProjectName}
            
            # STEP 4
            echo "4: Update Django settings.py (Not Used)" > $PROGRESS_FILE
            # Update the Django Settings.py file (I decided not to update, using secrets manager, and then we can update without stashing)
            #sudo sed -i "s/ALLOWED_HOSTS = \[\]/ALLOWED_HOSTS = \['${ElasticIp}','localhost'\]/g" /home/ubuntu/${ProjectName}/${ProjectName}/settings/settings.py
            #sudo sed -i "s/AWS_COGNITO_LOGIN_REDIRECT_URL = 'http:\/\/localhost:8000\/callback'/AWS_COGNITO_LOGIN_REDIRECT_URL = 'https:\/\/${ElasticIp}\/callback'/g" /home/ubuntu/${ProjectName}/${ProjectName}/settings/settings.py
            #sudo sed -i "s/AWS_COGNITO_LOGOUT_REDIRECT_URL = 'http:\/\/localhost:8000\/'/AWS_COGNITO_LOGOUT_REDIRECT_URL = 'https:\/\/${ElasticIp}\/'/g" /home/ubuntu/${ProjectName}/${ProjectName}/settings/settings.py

            # STEP 5
            echo "5: Install components and setup DB and static files" > $PROGRESS_FILE
            cd /home/ubuntu/${ProjectName}
            pipenv requirements > requirements.txt
            pip install -r requirements.txt
            python manage.py migrate
            python manage.py collectstatic
            
            # STEP 6
            echo "6: Give permissions and create super user" > $PROGRESS_FILE
            # Give user permissions to create super user
            sudo chown -R ubuntu:ubuntu /home/ubuntu/${ProjectName}/db.sqlite3
            sudo chmod -R 755 /home/ubuntu/${ProjectName}/db.sqlite3
            sudo chown -R ubuntu:ubuntu /home/ubuntu/${ProjectName}
            sudo chmod -R 755 /home/ubuntu/${ProjectName}
            echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('foodie', 'foodie@finder.com', 'finder')" | python /home/ubuntu/foodiefinder/manage.py shell
            
            # STEP 7
            echo "7: Self-signed SSL Certificate" > $PROGRESS_FILE
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout /etc/ssl/private/${ProjectName}.key \
            -out /etc/ssl/certs/${ProjectName}.crt \
            -subj "/C=US/ST=Idaho/L=Rexburg/O=${ProjectName}/OU=Development/CN=${ElasticIp}"

            # STEP 8
            echo "8: Setup Gunicorn" > $PROGRESS_FILE
            # give execution permission to our update script
            chmod +x /home/ubuntu/${ProjectName}/update.sh
            sudo mkdir /var/log/gunicorn
            sudo bash -c 'cat > /etc/supervisor/conf.d/gunicorn.conf << EOF
            [program:gunicorn]
            directory=/home/ubuntu/${ProjectName}
            command=/home/ubuntu/env/bin/gunicorn --workers 3 --bind unix:/home/ubuntu/${ProjectName}/app.sock ${ProjectName}.wsgi:application  
            autostart=true
            autorestart=true
            stderr_logfile=/var/log/gunicorn/gunicorn.err.log
            stdout_logfile=/var/log/gunicorn/gunicorn.out.log
            

            [group:guni]
            programs:gunicorn
            EOF'
            # Now change the user to root so it has permission to run
            sudo sed -i "s/user www-data;/user root;/g" /etc/nginx/nginx.conf
            sudo supervisorctl reread
            sudo supervisorctl update
            sudo bash -c 'cat > /etc/nginx/sites-available/django.conf << EOF
            server {
              listen 443 ssl;
              server_name ${ElasticIp} localhost;

              ssl on;
              ssl_certificate /etc/ssl/certs/${ProjectName}.crt;
              ssl_certificate_key /etc/ssl/private/${ProjectName}.key;

              location / {
                include proxy_params;
                proxy_pass http://unix:/home/ubuntu/${ProjectName}/app.sock;
              }
              location /static {
                  # Allow directory listing for debugging purposes (remove in production)
                  # autoindex on;

                  # Serve static files directly from the configured STATIC_ROOT path
                  alias /home/ubuntu/${ProjectName}/static/;
              }
            }
            EOF'

            # STEP 9
            echo "9: Redirect HTTP to HTTPS" > $PROGRESS_FILE
            sudo sed -i '/listen \[::\]:80 default_server;/a \ \n \t # Redirect all HTTP traffic to HTTPS\n \t rewrite ^/(.*) https://$host/$1 permanent;' /etc/nginx/sites-available/default

            # STEP 10
            echo "10: Finish setup and restart" > $PROGRESS_FILE
            sudo ln -s /etc/nginx/sites-available/django.conf /etc/nginx/sites-enabled
            sudo nginx -t

            sudo service nginx restart
            sudo supervisorctl reload

            echo "Finished successfully" > $PROGRESS_FILE

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable HTTP, SSH, and HTTPS access
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ElasticIp:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc

  ElasticIpAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties: 
      InstanceId: !Ref FoodieFinderInstance
      EIP: !Ref ElasticIp

  MyInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - LabRole  # AWS Lab Role

Outputs:
  InstanceId:
    Description: The instance ID
    Value: !Ref FoodieFinderInstance
  ElasticIp:
    Description: The Elastic IP address
    Value: !Ref ElasticIp
  ProjectName:
    Description: The name of the project
    Value: !Ref ProjectName